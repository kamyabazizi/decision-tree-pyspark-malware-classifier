from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler, StringIndexer, VectorIndexer
from pyspark.sql.functions import col
from pyspark.ml.classification import DecisionTreeClassifier
from pyspark.ml.tuning import CrossValidator, ParamGridBuilder, CrossValidatorModel
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.ml import Pipeline

spark = SparkSession.builder.appName("DT").getOrCreate()

df = spark.read.csv("/content/drive/MyDrive/Colab Notebooks/Binary Image/Copy of data_to_traFull.csv")
df = df.na.drop()
df_label = df.select('_c1025')
df_label = df_label.select([col(column).cast('int') for column in df_label.columns])
df = df.select([col(column).cast('double') for column in df.columns])

dfc = df.drop('_c1024','_c1025')
dfccol = dfc.columns


assembler = VectorAssembler(inputCols=dfccol, outputCol="features")
tra_df = assembler.transform(df)


final_df = tra_df.select("features",'_c1025')
final_df = final_df.withColumnRenamed('_c1025', "label")
dt = DecisionTreeClassifier(labelCol="label", featuresCol="features")

paramGrid = (ParamGridBuilder()
             .addGrid(dt.maxDepth, [3, 4, 5, 6, 7, 8])
             .addGrid(dt.maxBins, [4, 8, 16, 32])
             .build())

# Create 10-fold CrossValidator
crossval = CrossValidator(estimator=dt,
                          estimatorParamMaps=paramGrid,
                          evaluator=MulticlassClassificationEvaluator(),
                          numFolds=10)  
# Run cross validations
cvmodeldt = crossval.fit(final_df)

#final_df.show(5)

dftest = spark.read.csv("/content/drive/MyDrive/Colab Notebooks/Binary Image/Copy of data_to_test.csv")
dftest = dftest.na.drop()
df_labeltest = dftest.select('_c1025')
df_labeltest = df_labeltest.select([col(column).cast('int') for column in df_label.columns])
dftest = dftest.select([col(column).cast('double') for column in dftest.columns])

dfctest = dftest.drop('_c1024','_c1025')
dfccoltest = dfctest.columns


assembler = VectorAssembler(inputCols=dfccoltest, outputCol="features")
test_df = assembler.transform(dftest)


final_dftest = test_df.select("features",'_c1025')
final_dftest = final_dftest.withColumnRenamed('_c1025', "label")

dtevaluator = MulticlassClassificationEvaluator()
dtpredictions = cvmodeldt.transform(final_dftest)
print('Accuracy:', dtevaluator.evaluate(dtpredictions))

model = cvmodeldt.bestModel

java_model = model._java_obj
{param.name: java_model.getOrDefault(java_model.getParam(param.name)) 
    for param in paramGrid[0]}


## Train a DecisionTree model.
test_acc = []
for i in range(3,9):
  dt = DecisionTreeClassifier(maxDepth=i, labelCol="label", featuresCol="features")
  model = dt.fit(final_df)
  predictions = model.transform(final_dftest)
  evaluator = MulticlassClassificationEvaluator(
    labelCol="label", predictionCol="prediction", metricName="accuracy")
  accuracy = evaluator.evaluate(predictions)
  test_acc.append(accuracy)

plt.figure()

plt.plot(range(3,9),test_acc)

plt.xlabel('maxDepth')
plt.ylabel('test acc')
plt.title(f"results for test acc-maxDepth")
plt.show()

## Train a DecisionTree model.
maxbin = [4, 8, 16, 32]
test_acc = []
for i in range(0,4):
  dt = DecisionTreeClassifier(maxDepth=8, labelCol="label", featuresCol="features").setMaxBins(maxbin[i])
  model = dt.fit(final_df)
  predictions = model.transform(final_dftest)
  evaluator = MulticlassClassificationEvaluator(
    labelCol="label", predictionCol="prediction", metricName="accuracy")
  accuracy = evaluator.evaluate(predictions)
  test_acc.append(accuracy)

plt.figure()

plt.plot(maxbin,test_acc)

plt.xlabel('maxBin')
plt.ylabel('test acc')
plt.title(f"results for test acc-maxBin")
plt.show()
